 package gradleproject1;/*Author:Dev_JibreenMachine:Ubuntu LTS 20.04Date:19/05/2021*/import com.sun.source.tree.DoWhileLoopTree;import static java.lang.System.out; public class Main {           public static void main(String[] args) {         int blockSize[] = {100,200,300,400,700};         int processSize[] = {10,20,30,40,50,60};         DataProcess(blockSize, processSize);    }         public  static void DataProcess(int blockSize[], int processSize[]) {         int m = blockSize.length;         int n = processSize.length;                  //Create an Empty memory        int allocation[] = new int[n];         for (int i = 0; i < n; i++) {            allocation[i] = -1;         }                for (int i=0; i<n; i++)         {             int index = -1;             for (int j=0; j<m; j++)             {                 if (blockSize[j] >= processSize[i])                 {                     if (index == -1)                         index = j;                     else if (blockSize[index] < blockSize[j])                         index = j;                 }             }                     if (index != -1)             {                  allocation[i] = index;                         blockSize[index] -= processSize[i];             }         }                System.out.println("P|N.   Process Size	 Block No.");        for (int i = 0; i < n; i++){            System.out.print("   " + (i+1) + "      " + processSize[i] + "              ");            if (allocation[i] != -1)                System.out.print(allocation[i] + 1);            else                System.out.print("Not Allocated");                 System.out.println();         }     }      }/*Algorith::1- Create a  memory blocks and processes with sizes as an array.2- Create a Free Memory   blocks with no any elements.3- Start by picking each process and find the maximum block size that can be assigned to current process4-if found then assign it to the current process.5- If not then leave that process and keep checking the further processes.*//*How Worse Fit techniques  WorkThe process traverses the whole memory and always search for the largest hole/partition, and then the process is placed in that hole/partition.It is a slow process because it has to traverse the entire memor y to search the largest hole.*//*Here Process process size 10  traverses the entire memory and selects memory size 700which is the largest, and hence there is an internal fragmentation of 690 which is very largeand so many other processes can also utilize this leftover space.*/